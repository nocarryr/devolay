name: Java CI with Gradle

on: [ push, pull_request ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Install Dependencies
      run: sudo apt install mingw-w64 bison flex texinfo unzip help2man libtool-bin libncurses5-dev libncursesw5-dev

    - name: Install innoextract
      run: wget https://constexpr.org/innoextract/files/innoextract-1.9-linux.tar.xz && sudo tar --directory=/opt -xvf innoextract-1.9-linux.tar.xz

    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v1
      with:
        java-version: 8

    - uses: actions/cache@v2
      id: cacheNDI
      with:
        path: 'NDI SDK*'
        key: ${{ runner.os }}-ndiv5

    - name: Setup the NDI SDK
      if: steps.cacheNDI.outputs.cache-hit != 'true'
      run: |
        wget https://downloads.ndi.tv/SDK/NDI_SDK_Linux/Install_NDI_SDK_v5_Linux.tar.gz && tar -xvf Install_NDI_SDK_v5_Linux.tar.gz
        yes | ./Install_NDI_SDK_v5_Linux.sh > /dev/null
        rm Install_NDI_SDK_v5_Linux.tar.gz && rm Install_NDI_SDK_v5_Linux.sh
        wget https://downloads.ndi.tv/SDK/NDI_SDK_Android/Install_NDI_Advanced_SDK_v5_Android.tar.gz && tar -xvf Install_NDI_Advanced_SDK_v5_Android.tar.gz
        yes | ./Install_NDI_Advanced_SDK_v5_Android.sh > /dev/null
        mv "NDI Advanced SDK for Android" "NDI SDK for Android"
        rm Install_NDI_Advanced_SDK_v5_Android.tar.gz && rm Install_NDI_Advanced_SDK_v5_Android.sh
        wget https://downloads.ndi.tv/SDK/NDI_SDK/NDI%205%20SDK.exe && /opt/innoextract-1.9-linux/innoextract "NDI 5 SDK.exe"
        mkdir "NDI SDK for Windows" && mv app/* "NDI SDK for Windows"
        rm -r app && rm "NDI 5 SDK.exe"
        wget https://downloads.ndi.tv/SDK/NDI_SDK_Mac/Install_NDI_SDK_v5_macOS.pkg && 7z x Install_NDI_SDK_v5_macOS.pkg
        7z x Payload~
        mv "NDI SDK for macOS" "NDI SDK for Apple"
        rm Install_NDI_SDK_v5_macOS.pkg && rm Payload~

    - uses: actions/cache@v2
      id: cachetoolchain
      with:
        path: osxcross
        key: ${{ runner.os }}-osxtoolchain

    # Setup osxcross, as detailed here: https://github.com/andrew-d/docker-osxcross/blob/master/Dockerfile
    - name: Setup OSXCross
      if: steps.cachetoolchain.outputs.cache-hit != 'true'
      run: |
        git clone -n https://github.com/tpoechtrager/osxcross.git
        cd osxcross
        git checkout 364703ca0962c4a12688daf8758802a5df9e3221
        sudo apt update
        sudo ./tools/get_dependencies.sh
        curl -L -o ./tarballs/MacOSX10.15.sdk.tar.xz https://github.com/xorrior/osxsdk/raw/master/MacOSX10.15.sdk.tar.xz
        yes | PORTABLE=true ./build.sh
        yes | PORTABLE=true ./build_binutils.sh
    - name: Add OSXCross to path
      run: |
        export PATH=$PATH:./osxcross/target/bin

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # !!! Begin changes not to be included upstream repo
    - name: Build with Gradle
      if: ${{ github.repository_owner == 'WalkerKnapp' }}
      run: ./gradlew publishToMavenLocal -DandroidNdk=/usr/local/lib/android/sdk/ndk-bundle
      env:
        PGP_KEY: ${{ secrets.PGP_KEY }}
        PGP_KEY_ID: ${{ secrets.PGP_KEY_ID }}
        PGP_PASSWORD: ${{ secrets.PGP_PASSWORD }}

    - name: Gradlew assemble and install
      if: ${{ github.repository_owner != 'WalkerKnapp' }}
      run: |
        ./gradlew assemble
        ./gradlew install
    # !!! End changes not to be included in upstream repo

    - name: Upload build artifacts
      uses: actions/upload-artifact@v1
      with:
        name: build-artifacts
        path: devolay-java/build/libs
